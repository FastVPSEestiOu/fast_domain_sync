#!/usr/bin/env python
# -*- coding: utf-8 -*-
'''
Domain's Sync - plugin for sync domains between ISP Manager and FASTDNS

Copyright (C) 2019  FASTVPS <support@fastvps.ru>

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
'''

__author__="FASTVPS <support@fastvps.ru>"
__date__ ="$Dec, 2010 2:22:53 AM$"
__version__="0.6"
ISP_DIR = '/usr/local/ispmgr'

#from sys import argv
from sys import exit,path,stderr
from cgi import FieldStorage

path.append(ISP_DIR + '/lib/python')
from domainssync import DomainsSyncManager, args_to_params



#==============================================================================
if __name__ == "__main__":
    ds = DomainsSyncManager()

    try:
        ds.auth()
        try:
            args = FieldStorage(keep_blank_values=True)

            params = args_to_params(args)
            if params.has_key('out'):
                if params['out'] == 'text':
                    print 'Text'
                    exit(0)

        except Exception, ex:
            ds.log.Info("exception")
            raise Exception('Unable to parse args=[%s] with error [%s]'
                            % (args, ex))

        func = params['func']
        sok = ""
        if params.has_key('sok'):
            sok = params['sok']
        ds.log.Info('Calling [%s]' % (func, ))

        if params.has_key('elid'):
            ds.log.Debug('Elid found [%s] length[%s]' %
                         (params['elid'], len(params['elid'])))

            if (len(params['elid']) > 0):
                # delete domain
                if func=='domain.delete':
                    text = ds.delete_domain(params)
                # delete record
                if func=='domain.sublist.delete':
                    ds.delete_record(params)
                if func=='domain.sublist.edit' and sok != "":
                    ds.update_record(params)
            else:
                if func=='domain.edit':
                    ds.send_domain_create_request(params)
                if func=='domain.sublist.edit' and sok != "":
                    ds.add_record(params)
        else:
            ds.log.Debug('Elid not found')

        print(ds.get_empty_result())
    except Exception, ex:
        import traceback
        ds.log.Error('Unable to sync [%s] [%s]' %
                          (ex, traceback.format_exc()))
        ds.get_error_exit('Unable to sync [%s]' % (ex))

    exit(0)



